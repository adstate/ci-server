{"version":3,"sources":["pages/Start/Start.js","pages/Settings/Settings.js","pages/Configuration/Configuration.js","services/api.js","actions/builds.js","actions/actionTypes.js","pages/BuildHistory/BuildHistory.js","pages/BuildDetails/BuildDetails.js","actions/settings.js","containers/Main.js","components/App/App.js","components/Icon/Icon.js","components/Button/Button.js","components/Header/Header.js","components/Footer/Footer.js","components/Layout/Layout.js","components/Configure/Configure.js","components/SettingForm/SettingForm.js","components/Form/FormLabel.js","components/Form/FormField.js","components/Form/FormGroup.js","components/Form/FormError.js","components/Build/BuildList.js","components/Build/Build.js","components/Build/BuildLog.js","components/Build/testBuildLog.js","components/Build/NewBuild.js","components/Loader/Loader.js","components/Modal/Modal.js","components/Error/Error.js","serviceWorker.js","reducers/settings.js","reducers/builds.js","reducers/index.js","index.js"],"names":["Start","settings","useSelector","state","pending","Fragment","title","align","error","id","includes","repoStatus","Settings","container","Configuration","to","size","className","type","instance","require","create","baseURL","timeout","a","post","repoName","buildCommand","mainBranch","period","Number","get","then","response","data","commitHash","params","buildId","saveSettings","getSettings","addBuild","getBuilds","getBuild","getBuildLog","addBuildSuccess","build","fetchBuildLogSuccess","log","fetchBuilds","dispatch","api","res","builds","catch","fetchBuildsError","BuildHistory","addBuildPending","add_build_pending","useDispatch","useState","openModal","setOpenModal","useEffect","onClick","icon","class","open","onClose","onRunBuild","hash","BuildDetails","useParams","items","find","buildLog","build_log_to_view","get_build_pending","fetchError","history","useHistory","status","err","fetchBuildError","push","detailed","test","fetchSettings","fetchSettingsError","Main","exact","path","component","App","Icon","pseudo","iconClass","classNames","Button","variant","children","disabled","buttonClass","defaultProps","Header","Footer","Layout","layoutClass","Configure","SettingForm","saveSettingsSuccess","saveSettingsError","postSettings","useForm","handleSubmit","register","errors","waitingCloneRepo","save_pending","repoNotCloned","name","onSubmit","values","required","formRef","placeholder","defaultValue","message","direction","pattern","cleared","FormLabel","labelClass","ClassNames","FormField","mask","value","setValue","fieldClass","Classnames","inputClass","ref","onChange","event","target","inputChange","FormGroup","space","formGroupClass","FormError","BuildList","offset","limit","load_more","init_loaded","closest","dataset","map","key","buildNumber","length","buildsUpdateOffset","loadMoreBuilds","Build","buildClass","data-id","toLowerCase","commitMessage","branchName","authorName","start","format","Date","locale","ru","duration","BuildLog","convert","Convert","fg","dangerouslySetInnerHTML","__html","toHtml","NewBuild","reset","Loader","Modal","modalClass","Error","Boolean","window","location","hostname","match","action","Object","assign","save_error","totalFetch","build_to_view","get_log_error","combineReducers","middlewares","thunk","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.60b5d699.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect, useSelector } from 'react-redux';\r\nimport { Layout, Header, Loader, Error } from 'components';\r\nimport { BuildHistory, Configuration } from 'pages';\r\n\r\n\r\nconst Start = () => {\r\n    const settings = useSelector(state => state.settings);\r\n\r\n    if (settings.pending !== false) {\r\n        return (\r\n            <React.Fragment>\r\n                <Header title=\"School CI Server\"></Header>\r\n                <Layout align=\"center\">\r\n                    <Loader/>\r\n                </Layout>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n    if (settings.error) {\r\n        return (\r\n            <React.Fragment>\r\n                <Header title=\"School CI Server\"></Header>\r\n                <Layout align=\"center\">\r\n                    <Error>Error of fetching</Error>\r\n                </Layout>\r\n            </React.Fragment>            \r\n        )\r\n    }\r\n    \r\n    if (settings.id && ['Cloned', 'Empty'].includes(settings.repoStatus)) {\r\n        return <BuildHistory/>\r\n    }\r\n    \r\n    return <Configuration/>\r\n}\r\n\r\nexport default Start;\r\n","import React from 'react';\r\nimport { Header, Layout, SettingForm } from 'components';\r\n\r\n\r\nconst Settings = () => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header title=\"School CI Server\"></Header>\r\n            <Layout container>\r\n                <SettingForm/>\r\n            </Layout>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default Settings;","import React, {useEffect} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Layout, Configure, Header, Button, Icon } from 'components';\r\n\r\nconst Configuration = () => { \r\n    return (\r\n        <React.Fragment>\r\n            <Header title=\"School CI Server\">\r\n                <Link to=\"/settings\">\r\n                    <Button size=\"s\">\r\n                        <Icon className=\"button__icon\" type=\"settings\" size=\"xs\"></Icon>\r\n                        <span className=\"button__text\">Settings</span>\r\n                    </Button>\r\n                </Link>\r\n            </Header>\r\n            <Layout align=\"center\">\r\n                <Configure/>\r\n            </Layout>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Configuration;\r\n","const axios = require('axios');\r\n\r\nconst instance = axios.create({\r\n    baseURL: '/api',\r\n    timeout: 10000\r\n});\r\n\r\nasync function saveSettings(settings) {\r\n    return instance.post('/settings', {\r\n        repoName: settings.repoName,\r\n        buildCommand: settings.buildCommand,\r\n        mainBranch: settings.mainBranch || 'master',\r\n        period: Number(settings.period)\r\n    });\r\n}\r\n\r\nasync function getSettings() {\r\n    return instance.get('/settings').then(response => response.data);\r\n}\r\n\r\nasync function addBuild(commitHash) {\r\n    return instance.post(`/builds/${commitHash}`).then(response => response.data);\r\n}\r\n\r\nasync function getBuilds(params) {\r\n    return instance.get('/builds', {params}).then(response => response.data);\r\n}\r\n\r\nasync function getBuild(buildId) {\r\n    return instance.get(`/builds/${buildId}`).then(response => response.data);\r\n}\r\n\r\nasync function getBuildLog(buildId) {\r\n    return instance.get(`/builds/${buildId}/logs`).then(response => response.data);\r\n}\r\n\r\nexport default {\r\n    saveSettings,\r\n    getSettings,\r\n    addBuild,\r\n    getBuilds,\r\n    getBuild,\r\n    getBuildLog,\r\n};\r\n","import {\r\n    FETCH_BUILDS_PENDING,\r\n    FETCH_BUILDS_SUCCESS,\r\n    FETCH_BUILDS_ERROR,\r\n    FETCH_BUILD_PENDING,\r\n    FETCH_BUILD_SUCCESS,\r\n    FETCH_BUILD_ERROR,\r\n    FETCH_BUILD_LOG_SUCCESS,\r\n    FETCH_BUILD_LOG_ERROR,\r\n    ADD_BUILD_PENDING,\r\n    ADD_BUILD_SUCCESS,\r\n    ADD_BUILD_ERROR,\r\n    ADD_BUILD_TO_VIEW,\r\n    CLEAR_BUILD_TO_VIEW,\r\n    BUILDS_UPDATE_OFFSET,\r\n    BUILDS_CLEAR_STATE\r\n} from './actionTypes';\r\n\r\nimport api from '../services/api';\r\n\r\nexport const fetchBuildsPending = () => ({\r\n    type: FETCH_BUILDS_PENDING\r\n});\r\n\r\nexport const fetchBuildsSuccess = (builds) => ({\r\n    type: FETCH_BUILDS_SUCCESS,\r\n    builds\r\n});\r\n\r\nexport const fetchBuildsError = (error) => ({\r\n    type: FETCH_BUILDS_ERROR,\r\n    error\r\n});\r\n\r\nexport const fetchBuildPending = () => ({\r\n    type: FETCH_BUILD_PENDING\r\n});\r\n\r\nexport const fetchBuildSuccess = (build) => ({\r\n    type: FETCH_BUILD_SUCCESS,\r\n    build\r\n});\r\n\r\nexport const fetchBuildError = (error) => ({\r\n    type: FETCH_BUILD_ERROR,\r\n    error\r\n});\r\n\r\nexport const addBuildPending = () => ({\r\n    type: ADD_BUILD_PENDING\r\n});\r\n\r\nexport const addBuildSuccess = (build) => ({\r\n    type: ADD_BUILD_SUCCESS,\r\n    build\r\n});\r\n\r\nexport const addBuildError = () => ({\r\n    type: ADD_BUILD_ERROR\r\n});\r\n\r\nexport const addBuildToView = (build) => ({\r\n    type: ADD_BUILD_TO_VIEW,\r\n    build\r\n});\r\n\r\nexport const clearBuildToView = () => ({\r\n    type: CLEAR_BUILD_TO_VIEW\r\n});\r\n\r\nexport const fetchBuildLogSuccess = (log) => ({\r\n    type: FETCH_BUILD_LOG_SUCCESS,\r\n    log\r\n});\r\n\r\nexport const fetchBuildLogError = (error) => ({\r\n    type: FETCH_BUILD_LOG_ERROR,\r\n    error\r\n});\r\n\r\nexport const buildsUpdateOffset = (offset) => ({\r\n    type: BUILDS_UPDATE_OFFSET,\r\n    offset\r\n});\r\n\r\nexport const buildsClearState = () => ({\r\n    type: BUILDS_CLEAR_STATE\r\n});\r\n\r\nexport const fetchBuilds = (params) => {\r\n    return (dispatch) => {\r\n        dispatch(fetchBuildsPending());\r\n\r\n        api.getBuilds(params)\r\n            .then(res => {\r\n                if(res.error) {\r\n                    throw(res.error);\r\n                }\r\n                dispatch(fetchBuildsSuccess(res.data));\r\n                return res.data;\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchBuildsError(error));\r\n            })\r\n    }\r\n}\r\n\r\nexport const getBuild = (buildId) => {\r\n    return (dispatch) => {\r\n        dispatch(fetchBuildPending());\r\n\r\n        api.getBuild(buildId)\r\n            .then(res => {\r\n                if(res.error) {\r\n                    throw(res.error);\r\n                }\r\n                dispatch(fetchBuildSuccess(res.data));\r\n                return res.data;\r\n            })\r\n            .then(build => {\r\n                if (['Success', 'Fail'].includes(build.status)) {\r\n                    return api.getBuildLog(build.id);\r\n                }\r\n            })\r\n            .then(log => {\r\n                if (log) {\r\n                    dispatch(fetchBuildLogSuccess(log));\r\n                }\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchBuildError(error));\r\n            })\r\n    }\r\n}\r\n\r\nexport const getBuildLog = (buildId) => {\r\n    return (dispatch) => {\r\n        api.getBuildLog(buildId)\r\n           .then(res => {\r\n                dispatch(fetchBuildLogSuccess(res));\r\n           })\r\n           .catch(err => {\r\n                dispatch(fetchBuildLogError(err));\r\n           })\r\n    }\r\n}\r\n\r\nexport const addBuild = (commitHash) => {\r\n    return (dispatch) => {\r\n        dispatch(addBuildPending());\r\n\r\n        api.addBuild(commitHash)\r\n            .then(res => {\r\n                if(res.error) {\r\n                    throw(res.error);\r\n                }\r\n                dispatch(addBuildSuccess(res.data));\r\n                return res.data;\r\n            })\r\n            .catch(error => {\r\n                dispatch(addBuildError(error));\r\n            })\r\n    }\r\n}","export const FETCH_SETTINGS_PENDING = 'FETCH_SETTINGS_PENDING';\r\nexport const FETCH_SETTINGS_SUCCESS = 'FETCH_SETTINGS_SUCCESS';\r\nexport const FETCH_SETTINGS_ERROR = 'FETCH_SETTINGS_ERROR';\r\nexport const SAVE_SETTINGS_PENDING = 'SAVE_SETTINGS_PENDING';\r\nexport const SAVE_SETTINGS_SUCCESS = 'SAVE_SETTINGS_SUCCESS';\r\nexport const SAVE_SETTINGS_ERROR = 'SAVE_SETTINGS_ERROR';\r\n\r\nexport const FETCH_BUILDS_PENDING = 'FETCH_BUILDS_PENDING';\r\nexport const FETCH_BUILDS_SUCCESS = 'FETCH_BUILDS_SUCCESS';\r\nexport const FETCH_BUILDS_ERROR = 'FETCH_BUILDS_ERROR';\r\nexport const BUILDS_UPDATE_OFFSET = 'BUILDS_UPDATE_OFFSET';\r\nexport const BUILDS_CLEAR_STATE = 'BUILDS_CLEAR_STATE';\r\n\r\nexport const FETCH_BUILD_PENDING = 'FETCH_BUILD_PENDING';\r\nexport const FETCH_BUILD_SUCCESS = 'FETCH_BUILD_SUCCESS';\r\nexport const FETCH_BUILD_ERROR = 'FETCH_BUILD_ERROR';\r\nexport const FETCH_BUILD_LOG_SUCCESS = 'FETCH_BUILD_LOG_SUCCESS';\r\nexport const FETCH_BUILD_LOG_ERROR = 'FETCH_BUILD_LOG_ERROR';\r\nexport const ADD_BUILD_PENDING = 'ADD_BUILD_PENDING';\r\nexport const ADD_BUILD_SUCCESS = 'ADD_BUILD_SUCCESS';\r\nexport const ADD_BUILD_ERROR = 'ADD_BUILD_ERROR';\r\nexport const ADD_BUILD_TO_VIEW = 'ADD_BUILD_TO_VIEW';\r\nexport const CLEAR_BUILD_TO_VIEW = 'CLEAR_BUILD_TO_VIEW';","import React, {useState, useEffect} from 'react';\r\nimport {connect, useSelector, useDispatch} from 'react-redux';\r\nimport { Header, Layout, Button, Icon, BuildList, NewBuild } from 'components';\r\nimport {addBuild} from 'actions/builds';\r\n\r\n\r\nconst BuildHistory = () => {\r\n    const settings = useSelector(state => state.settings);\r\n    const addBuildPending = useSelector(state => state.builds.add_build_pending);\r\n\r\n    const dispatch = useDispatch();\r\n    const runBuild = (hash) => dispatch(addBuild(hash));\r\n\r\n    const [openModal, setOpenModal] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (addBuildPending === false) {\r\n            setOpenModal(false);\r\n        }\r\n    }, [addBuildPending]);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header title={settings.repoName}>\r\n                <div className=\"header__button-group\">\r\n                    <Button className=\"button_type_icon-text\" size=\"s\" onClick={() => setOpenModal(true)}>\r\n                        <Icon className=\"button__icon\" type=\"play\"/>\r\n                        <span className=\"button__text\">Run build</span>\r\n                    </Button>\r\n                    <Button icon size=\"s\" to=\"/settings\">\r\n                        <Icon class=\"button__icon\" type=\"settings\" size=\"xs\"/>\r\n                    </Button>\r\n                </div>\r\n            </Header>\r\n            <Layout container>\r\n                <BuildList/>\r\n            </Layout>\r\n            <NewBuild open={openModal} onClose={() => setOpenModal(false)} onRunBuild={runBuild} pending={addBuildPending}/>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default BuildHistory;\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {useParams, useHistory} from 'react-router-dom';\r\n\r\nimport {Button, Icon, Layout, Header, Build, BuildLog, Loader, Error} from 'components';\r\nimport {\r\n    addBuildPending,\r\n    addBuildSuccess,\r\n    addBuildError,\r\n    getBuild,\r\n    getBuildLog,\r\n    clearBuildToView\r\n} from 'actions/builds';\r\n\r\nimport api from 'services/api';\r\n\r\n\r\nconst BuildDetails = () => {\r\n    const { id } = useParams();\r\n    const build = useSelector(state => state.builds.items.find(build => build.id === id));\r\n    const buildLog = useSelector(state => state.builds.build_log_to_view);\r\n    const pending = useSelector(state => state.builds.get_build_pending);\r\n    const fetchError = useSelector(state => state.builds.error);\r\n\r\n    const settings = useSelector(state => state.settings);\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (!build) {\r\n            dispatch(getBuild(id));\r\n        } else {\r\n            if (['Success', 'Fail'].includes(build.status)) {\r\n                dispatch(getBuildLog(build.id));\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            dispatch(clearBuildToView());\r\n        }\r\n    }, []);\r\n\r\n    const rebuildHandler = () => {\r\n        dispatch(addBuildPending());\r\n\r\n        api.addBuild(build.commitHash)\r\n            .then(res => {\r\n                if (res.error) {\r\n                    throw(res.error);\r\n                }\r\n                dispatch(addBuildSuccess(res.data));\r\n                history.push(`/build/${res.data.id}`);\r\n            })\r\n            .catch(error => {\r\n                dispatch(addBuildError(error));\r\n            })\r\n    }\r\n\r\n    if (pending !== false && !build) {\r\n        return (\r\n            <React.Fragment>\r\n                <Header title=\"School CI Server\"></Header>\r\n                <Layout align=\"center\">\r\n                    <Loader/>\r\n                </Layout>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    if (fetchError) {\r\n        return (\r\n            <React.Fragment>\r\n                <Header title=\"School CI Server\"></Header>\r\n                <Layout align=\"center\">\r\n                    <Error>Error of fetching</Error>\r\n                </Layout>\r\n            </React.Fragment>           \r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header title={settings.repoName}>\r\n                <div className=\"header__button-group\">\r\n                    <Button className=\"button_type_icon-text\" size=\"s\" onClick={rebuildHandler}>\r\n                        <Icon className=\"button__icon\" type=\"refresh\"/>\r\n                        <span className=\"button__text\">Rebuild</span>\r\n                    </Button>\r\n                    <Button icon size=\"s\" to=\"/settings\">\r\n                        <Icon class=\"button__icon\" type=\"settings\" size=\"xs\"/>\r\n                    </Button>\r\n                </div>\r\n            </Header>\r\n            <Layout container>\r\n                <div className=\"section\">\r\n                    <Build detailed data={build}></Build>\r\n                    <BuildLog test={['Success', 'Fail'].includes(build.status)}>{buildLog || ''}</BuildLog>\r\n                </div>\r\n            </Layout>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default BuildDetails;\r\n","import {\r\n    SAVE_SETTINGS_PENDING,\r\n    SAVE_SETTINGS_SUCCESS,\r\n    SAVE_SETTINGS_ERROR,\r\n    FETCH_SETTINGS_PENDING,\r\n    FETCH_SETTINGS_SUCCESS,\r\n    FETCH_SETTINGS_ERROR\r\n} from './actionTypes';\r\n\r\nimport api from '../services/api';\r\n\r\n\r\nexport const fetchSettingsPending = () => ({\r\n    type: FETCH_SETTINGS_PENDING\r\n});\r\n\r\nexport const fetchSettingsSuccess = (settings) => ({\r\n    type: FETCH_SETTINGS_SUCCESS,\r\n    settings\r\n});\r\n\r\nexport const fetchSettingsError = (error) => ({\r\n    type: FETCH_SETTINGS_ERROR,\r\n    error\r\n});\r\n\r\nexport const saveSettingsPending = () => ({\r\n    type: SAVE_SETTINGS_PENDING\r\n});\r\n\r\nexport const saveSettingsSuccess = (settings) => ({\r\n    type: SAVE_SETTINGS_SUCCESS,\r\n    settings\r\n});\r\n\r\nexport const saveSettingsError = (error) => ({\r\n    type: SAVE_SETTINGS_ERROR,\r\n    error\r\n});\r\n\r\nexport const fetchSettings = () => {\r\n    return dispatch => {\r\n        dispatch(fetchSettingsPending());\r\n        \r\n        api.getSettings()\r\n            .then(res => {\r\n                if(res.error) {\r\n                    throw(res.error);\r\n                }\r\n                dispatch(fetchSettingsSuccess(res.data));\r\n                return res.data;\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchSettingsError(error));\r\n            })\r\n    }\r\n}\r\n\r\nexport const postSettings = (settings) => {\r\n    return dispatch => {\r\n        dispatch(saveSettingsPending());\r\n        \r\n        api.saveSettings(settings)\r\n            .then(res => {\r\n                if(res.error) {\r\n                    throw(res.error);\r\n                }\r\n\r\n                if (res.data.status === 'success') {\r\n                    dispatch(saveSettingsSuccess(settings));\r\n                }\r\n                \r\n                return res.data;\r\n            })\r\n            .catch(error => {\r\n                dispatch(saveSettingsError(error));\r\n            })\r\n    }\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { Start, Settings, BuildDetails } from 'pages';\r\nimport {fetchSettings} from '../actions/settings';\r\n\r\nconst Main = () => {\r\n    const settings = useSelector(state => state.settings);\r\n\r\n    const dispatch = useDispatch();\r\n    const getSettings = () => dispatch(fetchSettings());\r\n\r\n    useEffect(() => {\r\n        if (!settings.id) {\r\n            getSettings();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Switch>\r\n                <Route exact path='/' component={Start}/>\r\n                <Route exact path='/settings' component={Settings}/>\r\n                <Route exact path='/build/:id' component={BuildDetails}/>\r\n            </Switch>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport {Router} from 'react-router-dom';\r\nimport './App.scss';\r\nimport {Footer} from 'components';\r\nimport Main from 'containers/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App page page_view_all-screen\">\r\n      <Main/>\r\n      <Footer/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport './Icon.scss';\r\n\r\n\r\nconst Icon = ({type, size, pseudo, className, onClick}) => {\r\n\r\n    const iconClass = classNames(\r\n        'icon',\r\n        'icon_size_' + size,\r\n        'icon_type_' + type,\r\n        className, \r\n        {\r\n            'icon_pseudo': pseudo\r\n        }\r\n    );\r\n\r\n    return (\r\n        <span className={iconClass} onClick={onClick}></span>\r\n    )\r\n}\r\n\r\nIcon.propTypes = {\r\n    type: PropTypes.string.isRequired,\r\n    size: PropTypes.string\r\n}\r\n\r\nexport default Icon;","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport './Button.scss';\r\n\r\nimport Icon from '../Icon/Icon';\r\n\r\nconst Button = ({type, size, variant, icon, children, className, disabled, to, onClick}) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const buttonClass = classNames(\r\n        'button',\r\n        `button_${variant}`,\r\n        `button_size_${size}`,\r\n        className,\r\n        {\r\n            'button_disabled': disabled,\r\n            'button_type_icon': icon,\r\n        }\r\n    );\r\n\r\n    if (to) {\r\n        return (\r\n            <button type={type} className={buttonClass} onClick={() => history.push(to)} disabled={disabled}>\r\n                {children}\r\n            </button>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <button type={type} className={buttonClass} onClick={onClick} disabled={disabled}>\r\n            {children}\r\n        </button>\r\n    )\r\n}\r\n\r\nButton.propTypes = {\r\n    type: PropTypes.string,\r\n    size: PropTypes.string,\r\n    icon: PropTypes.bool,\r\n    variant: PropTypes.string\r\n};\r\n\r\nButton.defaultProps = {\r\n    type: 'button',\r\n    size: 'm',\r\n    icon: false,\r\n    variant: 'default'\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './Header.scss';\r\n\r\nimport Button from '../Button/Button';\r\nimport Icon from '../Icon/Icon';\r\n\r\nconst Header = ({title, children}) => {\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <div className=\"header__content\">\r\n                <h1 className=\"header__title text text_link\" onClick={() => history.push('/')}>{title}</h1>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Footer.scss';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div className=\"footer\">\r\n            <div className=\"footer__content\">\r\n                <div className=\"footer__links\">\r\n                    <Link className=\"link\" to=\"#\">Support</Link>\r\n                    <Link className=\"link\" to=\"#\">Learning</Link>\r\n                </div>\r\n                <p className=\"footer__copyright text text_link\">© 2020 Your Name</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classNames from 'classnames';\r\nimport './Layout.scss';\r\n\r\n\r\nconst Layout = ({align, container, children}) => {\r\n\r\n    const layoutClass = classNames('layout', {\r\n        'layout_align_center': align === 'center',\r\n        'layout_space-h_small': container\r\n    });\r\n\r\n    return (\r\n        <div className={layoutClass}>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nLayout.propTypes = {\r\n    align: PropTypes.string\r\n}\r\n\r\nLayout.defaultProps = {\r\n    align: null\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport './Configure.scss';\r\n\r\nimport { Button, Icon } from 'components';\r\n\r\nconst Configure = () => {\r\n    return (\r\n        <div className=\"configure\">\r\n            <Icon className=\"configure__icon\" type=\"configure\" size=\"xxxxl\"></Icon>\r\n            <p className=\"configure__title text text_primary\">\r\n                Configure repository connection and synchronization settings\r\n            </p>\r\n            <Button variant=\"action\" size=\"m\" to=\"/settings\">Open settings</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Configure;","import React, {useEffect} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {Button, FormField, FormGroup, FormLabel, FormError, Loader, Error} from 'components';\r\nimport {fetchSettings, postSettings} from 'actions/settings';\r\n\r\nimport './SettingForm.scss';\r\n\r\n\r\nconst SettingForm = () => {\r\n    const settings = useSelector(state => state.settings);\r\n\r\n    const dispatch = useDispatch();\r\n    const saveSettings = (data) => dispatch(postSettings(data));\r\n    const getSettings = () => dispatch(fetchSettings());\r\n\r\n    const { handleSubmit, register, errors } = useForm();\r\n    const onSubmit = (values) => saveSettings(values);\r\n\r\n    useEffect(() => {\r\n        if (settings.id && settings.repoStatus !== 'Cloned') {\r\n            getSettings();\r\n        }\r\n    }, []);\r\n  \r\n    if (settings.pending !== false) {\r\n        return (\r\n            <Loader/>\r\n        )\r\n    }\r\n\r\n    if (settings.error) {\r\n        return (\r\n            <Error>Error of fetching</Error>\r\n        )\r\n    }\r\n\r\n    const waitingCloneRepo = settings.repoStatus === 'Cloning' || settings.save_pending;\r\n    const repoNotCloned = settings.repoStatus === 'NotCloned';\r\n\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"layout__container\">\r\n                <form className=\"setting-form form\" name=\"settings\" onSubmit={handleSubmit(onSubmit)}>\r\n                    <div className=\"form__header\">\r\n                        <div className=\"form__title\">Settings</div>\r\n                        <div className=\"form__subtitle\">Configure repository connection and synchronization settings.</div>\r\n\r\n                        { \r\n                            (waitingCloneRepo) &&\r\n                            <div className=\"setting-form__repo-status text text_secondary\">Cloning repository...</div>\r\n                        }\r\n\r\n                        {\r\n                            (repoNotCloned) &&\r\n                            <div className=\"setting-form__repo-status text text_error\">Error of cloning repository</div>\r\n                        }\r\n                    </div>\r\n\r\n                    <FormGroup required>\r\n                        <FormLabel>GitHub repository</FormLabel>\r\n                        <FormField name=\"repoName\"\r\n                            formRef={register({required: 'repoName is required'})}\r\n                            errors={errors.repoName}\r\n                            icon=\"clear\" placeholder=\"user-name/repo-name\"\r\n                            defaultValue={settings.repoName}\r\n                        >\r\n                        </FormField>\r\n                        <FormError>\r\n                            {errors.repoName && errors.repoName.message}\r\n                        </FormError>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <FormLabel>Build command</FormLabel>\r\n                        <FormField name=\"buildCommand\"\r\n                            formRef={register({required: 'buildCommand is required'})}\r\n                            errors={errors.buildCommand}\r\n                            placeholder=\"npm run ...\" icon=\"clear\"\r\n                            defaultValue={settings.buildCommand}\r\n                        >\r\n                        </FormField>\r\n                        <FormError>\r\n                            {errors.buildCommand && errors.buildCommand.message}\r\n                        </FormError>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup>\r\n                        <FormLabel>Main branch</FormLabel>\r\n                        <FormField name=\"mainBranch\" formRef={register({})} placeholder=\"master\" icon=\"clear\" defaultValue={settings.mainBranch}></FormField>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup direction=\"row\">\r\n                        <FormLabel>Synchronize every</FormLabel>\r\n                        <FormField name=\"period\"\r\n                            formRef={register({required: 'Required', pattern: /^\\d+$/i })}\r\n                            errors={errors.period}\r\n                            size=\"s\" defaultValue={`${settings.period}`}\r\n                            align=\"right\" cleared={false}\r\n                        >\r\n                        </FormField>\r\n                        <div className=\"form__control-postfix\">minutes</div>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup className=\"setting-form__footer form__footer\" direction=\"row\">\r\n                        <Button type=\"submit\" className=\"setting-form__button setting-form__submit\" variant=\"action\" size=\"m\" disabled={waitingCloneRepo}>Save</Button>                    \r\n                        <Button type=\"reset\" className=\"setting-form__button\" variant=\"default\" size=\"m\" to=\"/\" disabled={waitingCloneRepo}>Candel</Button>\r\n                    </FormGroup>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n  \r\nexport default SettingForm;\r\n","import React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport './FormLabel.scss';\r\n\r\nconst FormLabel = ({children}) => {\r\n\r\n    const labelClass = ClassNames('form-label');\r\n\r\n    return (\r\n        <div className={labelClass}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormLabel;","import React, {useState} from 'react';\r\nimport MaskedInput from 'react-text-mask'\r\nimport PropTypes from 'prop-types';\r\nimport Classnames from 'classnames';\r\nimport './FormField.scss';\r\n\r\nimport {Icon} from 'components';\r\n\r\nconst FormField = ({type, name, mask, formRef, errors, size, cleared, align, placeholder, defaultValue}) => {\r\n\r\n    const [value, setValue] = useState(defaultValue);\r\n\r\n    const fieldClass = Classnames('form-field', {\r\n        'form-field_size_s': size === 's',\r\n        'form-field_invalid': errors\r\n    });\r\n\r\n    const inputClass = Classnames('form-field__input', {\r\n        'form-field__input_type_number': align === 'right'\r\n    });\r\n\r\n    const clearInput = () => {\r\n        setValue('');\r\n    }\r\n\r\n    const inputChange = (event) => {\r\n        setValue(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className={fieldClass}>\r\n            <input type={type} ref={formRef} name={name} className={inputClass} placeholder={placeholder} value={value} onChange={(event) => inputChange(event)}/>\r\n            {cleared && <Icon className=\"form-field__icon\" size=\"s\" type=\"clear\" onClick={clearInput}/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nFormField.propTypes = {\r\n    type: PropTypes.string,\r\n    size: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    defaultValue: PropTypes.string,\r\n    cleared: PropTypes.bool,\r\n    align: PropTypes.string\r\n}\r\n\r\nFormField.defaultProps = {\r\n    type: 'text',\r\n    size: null,\r\n    placeholder: '',\r\n    defaultValue: '',\r\n    cleared: true,\r\n    align: 'left'\r\n}\r\n\r\nexport default FormField;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ClassNames from 'classnames';\r\nimport './FormGroup.scss';\r\n\r\nconst FormGroup = ({direction, className, required, space, children}) => {\r\n\r\n    const formGroupClass = ClassNames(\r\n        'form-group',\r\n        'form-group_direction_' + direction,\r\n        className,\r\n        {\r\n            'form-group_required': required,\r\n            'form-group_space_m': space === 'm'\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div className={formGroupClass}>\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nFormGroup.propTypes = {\r\n    required: PropTypes.bool,\r\n    direction: PropTypes.string\r\n}\r\n\r\nFormGroup.defaultProps = {\r\n    required: false,\r\n    direction: 'column'\r\n}\r\n\r\nexport default FormGroup;","import React from 'react';\r\nimport './FormError.scss';\r\n\r\n\r\nconst FormError = ({children}) => {\r\n\r\n    return (\r\n        <div className=\"form-error\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default FormError;","import React, {useEffect, useState} from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {Build, Loader, Button} from 'components';\r\nimport {fetchBuilds, buildsUpdateOffset, buildsClearState, addBuildToView} from '../../actions/builds';\r\n\r\n\r\nconst BuildList = () => {\r\n    const builds = useSelector(state => state.builds.items);\r\n    const offset = useSelector(state => state.builds.offset);\r\n    const limit = useSelector(state => state.builds.limit);\r\n    const pending = useSelector(state => state.builds.pending);\r\n    const load_more = useSelector(state => state.builds.load_more);\r\n    const init_loaded = useSelector(state => state.builds.init_loaded);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (!init_loaded) {\r\n            dispatch(buildsClearState());\r\n            dispatch(fetchBuilds({offset: offset, limit: limit}));\r\n        }\r\n    }, []);\r\n\r\n    if (pending !== false && offset === 0) {\r\n        return <Loader/>;\r\n    }\r\n\r\n    const clickHandler = (event) => {\r\n        if (event.target.closest('.build')) {\r\n            const buildId = event.target.closest('.build').dataset.id;\r\n            history.push(`/build/${buildId}`);\r\n        }\r\n    }\r\n\r\n    const loadMoreBuilds = (offset) => {\r\n        dispatch(buildsUpdateOffset(offset));\r\n        dispatch(fetchBuilds({offset: offset, limit: limit}));\r\n    }\r\n\r\n    return (\r\n        <div className=\"section\">\r\n            <div className=\"layout__container\" onClick={clickHandler}>\r\n                {\r\n                    builds.map(build => {\r\n                        return <Build key={build.buildNumber} data={build}></Build>\r\n                    })\r\n                }\r\n\r\n                <div className=\"section__footer section__footer_align_left\">\r\n                    {\r\n                        (builds.length >= limit && load_more === false) &&\r\n                        <Button className=\"section__button\" size=\"s\" onClick={() => loadMoreBuilds(offset + limit)}>\r\n                            Show more\r\n                        </Button>\r\n                    }\r\n\r\n                </div>    \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BuildList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ClassNames from 'classnames';\r\nimport { format, formatDistance, formatRelative, subDays } from 'date-fns';\r\nimport { ru } from 'date-fns/locale'\r\n\r\nimport './Build.scss';\r\nimport {Icon} from 'components';\r\n\r\n\r\nconst Build = ({data, detailed, status}) => {\r\n\r\n    const buildClass = ClassNames(\r\n        'build',\r\n        {\r\n            'build_view_details': detailed,\r\n            'build_status_waiting': ['Waiting', 'InProgress'].includes(data.status),\r\n            'build_status_error': ['Fail'].includes(data.status),\r\n        }\r\n    );\r\n\r\n    return (\r\n        <div className={buildClass} data-id={data.id}>\r\n            <div className=\"build__status\">\r\n                <Icon className=\"build__status-icon\" type={data.status.toLowerCase()} size=\"m\" />\r\n            </div>\r\n            \r\n            <div className=\"build__detail\">\r\n                <div className=\"build__content\">\r\n                    <div className=\"build__header\">\r\n                        <p className=\"build__number\">#{data.buildNumber}</p>\r\n                        <p className=\"build__title\">{data.commitMessage}</p>\r\n                    </div>\r\n                    <div className=\"build__commit\">\r\n                        <div className=\"build__branch icon-text\">\r\n                            <span className=\"icon icon_size_s icon_type_commit icon_pseudo icon-text__icon icon-text__icon_indent-r_xs\"></span>\r\n                            <div className=\"icon-text__text icon-text__text_size_m\">\r\n                                <span className=\"build__branch-name text text_primary\">{data.branchName}</span>\r\n                                <span className=\"build__branch-commit text text_secondary\">{data.commitHash}</span>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"build__author icon-text\">\r\n                            <span className=\"icon icon_size_s icon_type_person icon_pseudo icon-text__icon icon-text__icon_indent-r_xs\"></span>\r\n                            <span className=\"icon-text__text icon-text__text_size_m\">{data.authorName}</span>\r\n                        </div>    \r\n                    </div>\r\n                </div>\r\n            \r\n                <div className=\"build__time\">\r\n                        <div className=\"build__datetime icon-text\">\r\n                            <span className=\"icon icon_pseudo icon_type_date icon_size_s  icon-text__icon_indent-r_xs\"></span>\r\n                            <span className=\"icon-text__text icon-text__text_nowrap text_pseudo\">\r\n                                { data.start ?\r\n                                    format(new Date(data.start), 'dd MMM hh:mm', { locale: ru })\r\n                                    : '-'\r\n                                }\r\n                            </span>\r\n                        </div>\r\n                \r\n                    <div className=\"build__timer icon-text\">\r\n                        <span className=\"icon icon_pseudo icon_type_timer icon_size_s icon-text__icon icon-text__icon_indent-r_xs\"></span>\r\n                        <span className=\"icon-text__text icon-text__text_nowrap text text_pseudo\">{data.duration || '-'}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nBuild.propTypes = {\r\n    status: PropTypes.string,\r\n    detailed: PropTypes.bool\r\n}\r\n\r\nBuild.defaultProps = {\r\n    status: 'success',\r\n    detailed: false\r\n}\r\n\r\nexport default Build;","import React, {useEffect} from 'react';\r\nimport Convert from 'ansi-to-html';\r\n\r\nimport './BuildLog.scss';\r\n\r\nimport testLog from './testBuildLog';\r\n\r\nconst BuildLog = ({children, test}) => {\r\n    const convert = new Convert({\r\n        fg: '#000'\r\n    });\r\n\r\n    const log = (test) ? testLog : children;\r\n\r\n    const createMarkup = () => {\r\n        return {__html: convert.toHtml(log)}\r\n    }\r\n\r\n    return (\r\n        <pre className=\"build-log\" dangerouslySetInnerHTML={createMarkup()}></pre>\r\n    );\r\n}\r\n\r\nexport default BuildLog;","const log = `\r\nHash: \u001b[1m6ecb5351f06605c7e805\u001b[39m\u001b[22m\r\nVersion: webpack \u001b[1m4.42.0\u001b[39m\u001b[22m\r\nTime: \u001b[1m4115\u001b[39m\u001b[22mms\r\nBuilt at: 2020-04-01 \u001b[1m13:17:45\u001b[39m\u001b[22m\r\n        \u001b[1mAsset\u001b[39m\u001b[22m       \u001b[1mSize\u001b[39m\u001b[22m  \u001b[1mChunks\u001b[39m\u001b[22m  \u001b[1m\u001b[39m\u001b[22m           \u001b[1m\u001b[39m\u001b[22m\u001b[1mChunk Names\u001b[39m\u001b[22m\r\n    \u001b[1m\u001b[32mindex.js\u001b[39m\u001b[22m  974 bytes       \u001b[1m0\u001b[39m\u001b[22m  \u001b[1m\u001b[32m[emitted]\u001b[39m\u001b[22m  main\r\n\u001b[1m\u001b[32mstyles.css\u001b[39m\u001b[22m   41.8 KiB       \u001b[1m0\u001b[39m\u001b[22m  \u001b[1m\u001b[32m[emitted]\u001b[39m\u001b[22m  main\r\nEntrypoint \u001b[1mmain\u001b[39m\u001b[22m = \u001b[1m\u001b[32mstyles.css\u001b[39m\u001b[22m \u001b[1m\u001b[32mindex.js\u001b[39m\u001b[22m\r\n[0] \u001b[1m./src/index.js\u001b[39m\u001b[22m 29 bytes {\u001b[1m\u001b[33m0\u001b[39m\u001b[22m}\u001b[1m\u001b[32m [built]\u001b[39m\u001b[22m\r\n[1] \u001b[1m./src/styles/styles.css\u001b[39m\u001b[22m 39 bytes {\u001b[1m\u001b[33m0\u001b[39m\u001b[22m}\u001b[1m\u001b[32m [built]\u001b[39m\u001b[22m\r\n    + 1 hidden module\r\nChild \u001b[1mmini-css-extract-plugin node_modules/css-loader/dist/cjs.js!node_modules/postcss-loader/src/index.js!src/styles/styles.css\u001b[39m\u001b[22m:\r\n    Entrypoint \u001b[1mmini-css-extract-plugin\u001b[39m\u001b[22m = \u001b[1m\u001b[32m*\u001b[39m\u001b[22m\r\n    [0] \u001b[1m./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/src!./src/styles/styles.css\u001b[39m\u001b[22m 44.9 KiB {\u001b[1m\u001b[33m0\u001b[39m\u001b[22m}\u001b[1m\u001b[32m [built]\u001b[39m\u001b[22m\r\n        + 1 hidden module\r\n`;\r\n\r\nexport default log;","import React, {useEffect} from 'react';\r\nimport { connect, useSelector, useDispatch } from 'react-redux';\r\nimport { useForm } from \"react-hook-form\";\r\nimport {addBuild} from 'actions/builds';\r\nimport {Button, FormField, FormGroup, FormError, Modal} from 'components';\r\nimport './NewBuild.scss';\r\n\r\n\r\nconst NewBuild = ({open, onClose, onRunBuild, pending}) => {\r\n    const { handleSubmit, register, errors, reset } = useForm();\r\n    const onSubmit = (values) => {\r\n        onRunBuild(values.commitHash);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (open) {\r\n            reset({commitHash: ''});\r\n        }\r\n    }, [open]);\r\n\r\n    return (\r\n        <Modal open={open}>\r\n            <form className=\"new-build form\" onSubmit={handleSubmit(onSubmit)}>\r\n                <div className=\"new-build__title form__title\">\r\n                    New build\r\n                </div>\r\n                <div className=\"new-build__subtitle form__subtitle\">\r\n                    Enter the commit hash which you want to build.\r\n                </div>\r\n                <FormGroup space=\"m\">\r\n                    <FormField name=\"commitHash\"\r\n                        formRef={register({required: true})}\r\n                        errors={errors.commitHash}\r\n                        icon=\"clear\" placeholder=\"Commit hash\"\r\n                    >\r\n                    </FormField>\r\n                    <FormError>\r\n                        {errors.commitHash && errors.commitHash.message}\r\n                    </FormError>\r\n                </FormGroup>\r\n\r\n                <FormGroup space=\"m\" className=\"setting-form__footer form__footer\" direction=\"row\">\r\n                    <Button type=\"submit\" className=\"setting-form__button setting-form__submit\" variant=\"action\" size=\"m\" disabled={pending === true}>Run build</Button>                    \r\n                    <Button type=\"reset\" className=\"setting-form__button\" variant=\"default\" size=\"m\" onClick={onClose} disabled={pending === true}>Candel</Button>\r\n                </FormGroup>\r\n            </form>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default NewBuild;\r\n","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader-container\">\r\n            <div className=\"loader\"><div></div><div></div><div></div><div></div></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loader;","import React from 'react';\r\nimport ClassNames from 'classnames';\r\nimport ReactDOM from 'react-dom';\r\nimport './Modal.scss';\r\n\r\n\r\nconst Modal = ({open, onClose, children}) => {\r\n    const modalClass = ClassNames(\r\n        'modal',\r\n        {\r\n            'modal_open': open\r\n        }\r\n    )\r\n\r\n    return (\r\n        <div className={modalClass}>\r\n            <div className=\"modal__dialog\">\r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport './Error.scss';\r\n\r\nimport {Icon} from 'components';\r\n\r\n\r\nconst Error = ({children}) => {\r\n    return (\r\n        <div className=\"loader-container\">\r\n            <div className=\"error\">\r\n                <Icon className=\"error__icon\" type=\"fetch-error\" size=\"l\" pseudo/>            \r\n                {children}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n    SAVE_SETTINGS_PENDING,\r\n    SAVE_SETTINGS_SUCCESS,\r\n    SAVE_SETTINGS_ERROR,\r\n    FETCH_SETTINGS_PENDING,\r\n    FETCH_SETTINGS_SUCCESS,\r\n    FETCH_SETTINGS_ERROR\r\n} from 'actions/actionTypes'\r\n \r\nconst settings = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case FETCH_SETTINGS_PENDING:\r\n            return {\r\n                ...state,\r\n                pending: true\r\n            }\r\n\r\n        case FETCH_SETTINGS_SUCCESS:\r\n            return Object.assign({}, state, action.settings, {pending: false});\r\n\r\n        case FETCH_SETTINGS_ERROR:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                error: action.error\r\n            }\r\n\r\n        case SAVE_SETTINGS_PENDING:\r\n            return {\r\n                ...state,\r\n                repoStatus: 'Empty',\r\n                save_pending: true\r\n            }\r\n\r\n        case SAVE_SETTINGS_SUCCESS:\r\n            return Object.assign({}, state, action.settings, {save_pending: false});\r\n\r\n        case SAVE_SETTINGS_ERROR:\r\n            return {\r\n                ...state,\r\n                save_pending: false,\r\n                save_error: action.error\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n  \r\nexport default settings;","import {\r\n    FETCH_BUILD_PENDING,\r\n    FETCH_BUILD_SUCCESS,\r\n    FETCH_BUILD_ERROR,\r\n    FETCH_BUILD_LOG_SUCCESS,\r\n    FETCH_BUILD_LOG_ERROR,\r\n    FETCH_BUILDS_PENDING,\r\n    FETCH_BUILDS_SUCCESS,\r\n    FETCH_BUILDS_ERROR,\r\n    ADD_BUILD_PENDING,\r\n    ADD_BUILD_SUCCESS,\r\n    ADD_BUILD_ERROR,\r\n    BUILDS_UPDATE_OFFSET,\r\n    BUILDS_CLEAR_STATE,\r\n    ADD_BUILD_TO_VIEW,\r\n    CLEAR_BUILD_TO_VIEW\r\n} from 'actions/actionTypes'\r\n \r\nconst builds = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case FETCH_BUILDS_PENDING:\r\n            return {\r\n                ...state,\r\n                pending: true\r\n            }\r\n\r\n        case FETCH_BUILDS_SUCCESS:\r\n            const totalFetch = action.builds.length;\r\n\r\n            return {\r\n                ...state,\r\n                items: [...state.items, ...action.builds],\r\n                pending: false,\r\n                init_loaded: true,\r\n                load_more: totalFetch === 0\r\n            }\r\n\r\n        case FETCH_BUILDS_ERROR:\r\n            return {\r\n                ...state,\r\n                pending: false,\r\n                error: action.error\r\n            }\r\n\r\n        case FETCH_BUILD_PENDING:\r\n            return {\r\n                ...state,\r\n                get_build_pending: true\r\n            }\r\n        \r\n        case FETCH_BUILD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                items: [...state.items, action.build],\r\n                //build_to_view: action.build,\r\n                get_build_pending: false\r\n            }\r\n        \r\n        case FETCH_BUILD_ERROR:\r\n            return {\r\n                ...state,\r\n                get_build_pending: false,\r\n                error: action.error\r\n            }\r\n\r\n        case ADD_BUILD_PENDING:\r\n            return {\r\n                ...state,\r\n                add_build_pending: true\r\n            }\r\n\r\n        case ADD_BUILD_SUCCESS:\r\n            return {\r\n                ...state,\r\n                items: [action.build, ...state.items],\r\n                offset: state.offset + 1,\r\n                add_build_pending: false\r\n            }\r\n\r\n        case ADD_BUILD_ERROR:\r\n            return {\r\n                ...state,\r\n                add_build_pending: false\r\n            }\r\n\r\n        case BUILDS_UPDATE_OFFSET: \r\n            return {\r\n                ...state,\r\n                offset: action.offset\r\n            }\r\n\r\n        case BUILDS_CLEAR_STATE:\r\n            return {\r\n                ...state,\r\n                items: []\r\n            }\r\n\r\n        case ADD_BUILD_TO_VIEW:\r\n            return {\r\n                ...state,\r\n                build_to_view: action.build\r\n            }\r\n\r\n        case CLEAR_BUILD_TO_VIEW: \r\n            return {\r\n                ...state,\r\n                build_to_view: null,\r\n                build_log_to_view: null\r\n            }\r\n\r\n        case FETCH_BUILD_LOG_SUCCESS:\r\n            return {\r\n                ...state,\r\n                build_log_to_view: action.log\r\n            }\r\n        \r\n        case FETCH_BUILD_LOG_ERROR:\r\n            return {\r\n                ...state,\r\n                get_log_error: action.error\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n  \r\nexport default builds;","import { combineReducers } from 'redux';\r\nimport settings from './settings';\r\nimport builds from './builds';\r\n\r\n\r\nexport default combineReducers({\r\n    settings,\r\n    builds,\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport { App } from 'components';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst initialState = {\r\n  settings: {},\r\n  builds: {\r\n    items: [],\r\n    offset: 0,\r\n    limit: 10\r\n  }\r\n}\r\n\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(...middlewares));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}